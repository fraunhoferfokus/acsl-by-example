
MAKEFLAGS += --silent --no-print-directory

SHELL=/bin/bash

export FRAMAC_SHARE:=$(shell frama-c -print-share-path)

export TOP_DIR:=../..
export SCRIPT_DIR:=$(TOP_DIR)/Scripts
export VS_DIR:=$(TOP_DIR)/../Misc/VerificationService
export DRIVER_DIR:=$(TOP_DIR)/drivers

CPPFLAGS := -I$(TOP_DIR)
CPPFLAGS += -I$(TOP_DIR)/Logic

VPATH += $(TOP_DIR)/nonmutating
CPPFLAGS += -I$(TOP_DIR)/nonmutating
LDFLAGS  += -L$(TOP_DIR)/nonmutating

VPATH += $(TOP_DIR)/maxmin
CPPFLAGS += -I$(TOP_DIR)/maxmin
LDFLAGS  += -L$(TOP_DIR)/maxmin

VPATH += $(TOP_DIR)/binarysearch
CPPFLAGS += -I$(TOP_DIR)/binarysearch
LDFLAGS  += -L$(TOP_DIR)/binarysearch

VPATH += $(TOP_DIR)/mutating
CPPFLAGS += -I$(TOP_DIR)/mutating
LDFLAGS  += -L$(TOP_DIR)/mutating

VPATH += $(TOP_DIR)/unique
CPPFLAG += -I$(TOP_DIR)/unique
LDFLAGS += -L$(TOP_DIR)/unique

VPATH += $(TOP_DIR)/heap
CPPFLAGS += -I$(TOP_DIR)/heap
LDFLAGS  += -L$(TOP_DIR)/heap

VPATH += $(TOP_DIR)/numeric
CPPFLAGS += -I$(TOP_DIR)/numeric
LDFLAGS  += -L$(TOP_DIR)/numeric

VPATH += $(TOP_DIR)/stack
CPPFLAGS += -I$(TOP_DIR)/stack
LDFLAGS  += -L$(TOP_DIR)/stack

VPATH += $(TOP_DIR)/stack_axiom
CPPFLAGS += -I$(TOP_DIR)/stack_axiom
#LDFLAGS  += -L$(TOP_DIR)/stack_axiom

VPATH += $(TOP_DIR)/stack_wd
CPPFLAGS += -I$(TOP_DIR)/stack_wd
LDFLAGS  += -L$(TOP_DIR)/stack_wd

#setup some basic flags
INCLUDES := $(CPPFLAGS)

# PREPROCESSOR

SHARED_FLAGS=-Wall -pedantic -Werror -O2
CFLAGS=-x c++ -std=c++14 $(SHARED_FLAGS)
CXXFLAGS=-std=c++14 $(SHARED_FLAGS)

export TIMEOUT   ?= 10
export PROCESSES ?= 1

#setup wp
export WP_TIMEOUT        ?= $(TIMEOUT)
export WP_COQ_TIMEOUT    ?= $(TIMEOUT)
export WP_ALT_ERGO_STEPS ?= 10000
export WP_PROCESSES      ?= $(PROCESSES)

#setup av
export AV_TIMEOUT   ?= $(TIMEOUT)
export AV_PROCESSES ?= $(PROCESSES)

# flags for when we invoke Frama C directly instead of going
# through script_functions.sh
WP_TIME_FLAGS= \
	-wp-timeout $(WP_TIMEOUT) \
	-wp-coq-timeout $(WP_COQ_TIMEOUT) \
	-wp-steps $(WP_ALT_ERGO_STEPS) \
	-wp-par $(WP_PROCESSES)

#setup coq
SCRIPT?='$(TOP_DIR)/wp0.script' # default script
DRIVER=$(DRIVER_DIR)/driver

# having this as a separate variable allows us to override it in
# algorithm makefiles
WP_RTE_FLAGS ?= -warn-unsigned-overflow -warn-unsigned-downcast

# We differentiate between two types of WP options:
# 1) in WP_FLAGS we collect the general options
# 2) in WP_PROVER_FLAGS we collect the ones where we select the provers
# This allows us, for example, to start the gui very quickly and then
# run the prover(s) on select proof obligtions.

BASE_FLAGS := -pp-annot
BASE_FLAGS += -no-unicode

WP_BASE_FLAGS := $(BASE_FLAGS)
WP_BASE_FLAGS += -wp
WP_BASE_FLAGS += -wp-rte $(WP_RTE_FLAGS)

AV_BASE_FLAGS := $(BASE_FLAGS)
AV_BASE_FLAGS += -av

WP_FLAGS := $(WP_BASE_FLAGS)
WP_FLAGS += -wp-driver $(DRIVER_DIR)/external.driver
WP_FLAGS += -wp-script $(SCRIPT)
WP_FLAGS += -wp-model Typed+ref

AV_FLAGS     := $(AV_BASE_FLAGS) -av-extract all_annot
AV_WHY3_CONF := $(shell realpath $(TOP_DIR))/astraver.why3.conf

WP_PROVER_FLAGS += -wp-steps $(WP_ALT_ERGO_STEPS)

# provers
WP_PROVER_FLAGS += -wp-prover alt-ergo
WP_PROVER_FLAGS += -wp-prover cvc4
WP_PROVER_FLAGS += -wp-prover z3
WP_PROVER_FLAGS += -wp-prover coq
WP_PROVER_FLAGS += -wp-prover cvc3
WP_PROVER_FLAGS += -wp-prover eprover


#WP_PROVER_FLAGS += -wp-prover gappa
#WP_PROVER_FLAGS += -wp-prover metis

# link binary metit to metitarski
#WP_PROVER_FLAGS += -wp-prover metitarski

#WP_PROVER_FLAGS += -wp-prover princess
#WP_PROVER_FLAGS += -wp-prover psyche

# only ppc binary for available for macOS ...
#WP_PROVER_FLAGS += -wp-prover simplify
#WP_PROVER_FLAGS += -wp-prover spass
#WP_PROVER_FLAGS += -wp-prover verit

# yices (version 2.* does not support quantifiers ...)
#WP_PROVER_FLAGS += -wp-prover Yices

export FR    := frama-c
export FRGUI := frama-c-gui

export WP_PROVER_FLAGS
export WP_C_FLAGS   = -cpp-extra-args="$(INCLUDES)" $(WP_FLAGS)
export WP_CXX_FLAGS = -cxx-clang-command="framaCIRGen $(INCLUDES)"  $(WP_FLAGS)
export WP_C_REPORT  = $(FR) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) -wp-par $(WP_PROCESSES)

export AV_C_FLAGS  := -cpp-extra-args="$(INCLUDES)" $(AV_FLAGS)
export AV_STRATEGY = acslbyexample
export AV_C_REPORT = $(FR) $(AV_C_FLAGS) -av-target why3sprove -av-why3-opt " --extra-config $(AV_WHY3_CONF) --no-save-session --strategy $(AV_STRATEGY) "

export PERL=perl

ifndef FILE
	FILE := $(shell basename $$(pwd))
endif

TESTOBJ = $(FILE)_test.o $(FILE).o

$(DRIVER): FORCE
	@(cd $(DRIVER_DIR) && $(MAKE) compile)

define av_why3conf
[main]
running_provers_max = $(AV_PROCESSES)

[strategy]
code = "
start:
  c Alt-Ergo,, 1 2000
  c CVC4,,noBV 1 2000
  c Z3,, 1 2000
  c CVC3,, 1 2000
  c Eprover,, 1 2000
  t split_goal_wp start
  t introduce_premises next1
next1:
  t inline_all next2
next2:
  t eliminate_if next3
next3:
  t remove_triggers start
  c Alt-Ergo,, $(AV_TIMEOUT) 4000
  c CVC4,,noBV $(AV_TIMEOUT) 4000
  c Z3,, $(AV_TIMEOUT) 4000
  c CVC3,, $(AV_TIMEOUT) 4000
  c Eprover,, $(AV_TIMEOUT) 4000"
desc = "Default strategy for ACSL-By-Example"
name = "acslbyexample"
endef
export av_why3conf

$(AV_WHY3_CONF): FORCE
	@if [ -f $@ ]; then                          \
		tfile=$(shell mktemp);               \
		echo "$$av_why3conf" > $$tfile;      \
		diff -q $@ $$tfile > /dev/null || mv $$tfile $@; \
	else echo "$$av_why3conf" > $@; fi

$(FILE)_test: $(TESTOBJ) FORCE
	@$(CXX) $(LDFLAGS) -o $@ $(TESTOBJ)

test: $(FILE)_test FORCE
	@./$(FILE)_test $(TEST_DATA)

%.cpp:%.c
	cp $< $@

# only generate proof obligations for why3
%.why3:%.c FORCE
	@$(FR) $(WP_C_FLAGS) $(WP_TIME_FLAGS) -wp-prover why3 -wp-gen -wp-out $(patsubst %.c,%.wp, $<) $<

# start FR on command line and run provers
%.wp:%.c $(DRIVER) FORCE
	@$(FR) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $@ $<

%.wp++:%.cpp FORCE
	@$(FR) $(WP_CXX_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $@ $<

%.vs-par:%.c FORCE
	@${VS_DIR}/vs.sh -p $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(notdir $(patsubst %.c,%.wp, $<))

%.vs-pipe:%.c FORCE
	@${VS_DIR}/vs.sh -d $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(notdir $(patsubst %.c,%.wp, $<))

vs-par: $(FILE).vs-par

vs-pipe: $(FILE).vs-pipe

%.wprunner:%.c FORCE
	@${SCRIPT_DIR}/wp_runner.sh $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) -wp-par $(WP_PROCESSES)

%.av:%.c $(AV_WHY3_CONF) FORCE
	@$(AV_C_REPORT) -av-out $@ $<

# GUI
%.avgui:%.c $(AV_WHY3_CONF) FORCE
	@$(FR) $(AV_C_FLAGS) -av-why3-opt " --extra-config $(AV_WHY3_CONF) " -av-out $(patsubst %.c,%.av, $<) $<

# start FR GUI and run provers
%.wpgui:%.c $(DRIVER) FORCE
	@($(FRGUI) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.c,%.wp, $<)  $< &)

%.wpgui++:%.cpp FORCE
	@($(FRGUI) $(WP_CXX_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.cpp,%.wp++, $<)  $< )

%.normal.c : %.c FORCE
	@$(FR) $(WP_C_FLAGS) -wp-no-rte -wp-check -wp-prover none $< -print |\
	$(PERL) -e 'my $$f = join("", <>); $$f =~ s!\A.*(?=/\*@.*\*/[^/]*$*\([^)]++\)\s*+\{)!!s; print $$f;' > $@

%.normal-rte.c : %.c FORCE
	@$(FR) $(WP_C_FLAGS) -wp-check -wp-prover none $< -print |\
	$(PERL) -e 'my $$f = join("", <>); $$f =~ s!\A.*(?=/\*@.*\*/[^/]*$*\([^)]++\)\s*+\{)!!s; print $$f;' > $@

$(TOP_DIR)/Results/$(FILE).report: $(FILE).c
	. ${SCRIPT_DIR}/script_functions.sh; extract_data_Wp $(FILE) $(CMD) $(SEC) > $@

$(TOP_DIR)/Results/$(FILE).preport: $(FILE).c
	@. ${SCRIPT_DIR}/script_functions.sh; REPORT_BACKEND=wp_runner extract_data_Wp $(basename $<) $(CMD) $(SEC) > $@

$(TOP_DIR)/Results/$(FILE).areport: $(AV_WHY3_CONF) $(FILE).c
	. ${SCRIPT_DIR}/script_functions.sh; extract_data_Av $(FILE) $(CMD) $(SEC) > $@

generate: $(FILE).why3

report: $(TOP_DIR)/Results/$(FILE).report
	@. ${SCRIPT_DIR}/script_functions.sh; prettyPrintReport $<

report-clean: clean
	@$(RM) $(TOP_DIR)/Results/$(FILE).report

preport: $(TOP_DIR)/Results/$(FILE).preport
	@. ${SCRIPT_DIR}/script_functions.sh; prettyPrintReport $<

preport-clean:
	@$(RM) $(TOP_DIR)/Results/$(FILE).preport

areport: $(TOP_DIR)/Results/$(FILE).areport
	@. ${SCRIPT_DIR}/script_functions.sh; prettyPrintReport $<

areport-clean:
	@$(RM) $(TOP_DIR)/Results/$(FILE).areport

%.check:%.c
	@$(FR) $(WP_C_FLAGS) -wp-check -wp-out $(patsubst %.c,%.wp, $<)  $<

# display saved results by FRAMA-C GUI
load:
	@frama-c-gui -load $(FILE).sav

obj: $(FILE).o

# cleanup

clean:: FORCE
	@(cd $(DRIVER_DIR) && $(MAKE) -s clean)
	@$(RM) *.o *.pp.c *.pp.h *.back *.orig *.exe .lia.cache $(FILE).cpp $(FILE)_test $(FILE).tex $(FILE).sav
	@$(RM) -rf  *.debug .frama-c *.jessie *.av *.wp *.wp++ *.ml

ASTYLEOPTIONS += --quiet
ASTYLEOPTIONS += -A4
ASTYLEOPTIONS += --indent=spaces=2
ASTYLEOPTIONS += --indent-col1-comments
ASTYLEOPTIONS += --min-conditional-indent=0
ASTYLEOPTIONS += --lineend=linux
ASTYLEOPTIONS += --break-return-type
ASTYLEOPTIONS += --break-return-type-decl
ASTYLEOPTIONS += --add-braces
ASTYLEOPTIONS += --break-closing-braces
ASTYLEOPTIONS += --break-one-line-headers
ASTYLEOPTIONS += --break-blocks
ASTYLEOPTIONS += --delete-empty-lines
ASTYLEOPTIONS += --pad-oper
ASTYLEOPTIONS += --pad-header

format: FORCE
	@astyle $(ASTYLEOPTIONS) *.c *.cpp *.h

all: clean test report

FORCE:
