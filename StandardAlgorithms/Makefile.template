
MAKEFLAGS += --silent --no-print-directory

SHELL=/bin/bash

export FRAMAC_SHARE := $(shell frama-c -print-share-path)

export TOP_DIR=../..
export SCRIPT_DIR=$(TOP_DIR)/Scripts
export VS_DIR=$(TOP_DIR)/../Misc/VerificationService
export DRIVER_DIR=$(TOP_DIR)/drivers

CPPFLAGS = -I$(TOP_DIR)
CPPFLAGS += -I$(TOP_DIR)/Logic

VPATH += $(TOP_DIR)/nonmutating
CPPFLAGS += -I$(TOP_DIR)/nonmutating
LDFLAGS  += -L$(TOP_DIR)/nonmutating

VPATH += $(TOP_DIR)/maxmin
CPPFLAGS += -I$(TOP_DIR)/maxmin
LDFLAGS  += -L$(TOP_DIR)/maxmin

VPATH += $(TOP_DIR)/binarysearch
CPPFLAGS += -I$(TOP_DIR)/binarysearch
LDFLAGS  += -L$(TOP_DIR)/binarysearch

VPATH += $(TOP_DIR)/mutating
CPPFLAGS += -I$(TOP_DIR)/mutating
LDFLAGS  += -L$(TOP_DIR)/mutating

VPATH += $(TOP_DIR)/heap
CPPFLAGS += -I$(TOP_DIR)/heap
LDFLAGS  += -L$(TOP_DIR)/heap

VPATH += $(TOP_DIR)/numeric
CPPFLAGS += -I$(TOP_DIR)/numeric
LDFLAGS  += -L$(TOP_DIR)/numeric

VPATH += $(TOP_DIR)/stack
CPPFLAGS += -I$(TOP_DIR)/stack
LDFLAGS  += -L$(TOP_DIR)/stack

VPATH += $(TOP_DIR)/stack_axiom
CPPFLAGS += -I$(TOP_DIR)/stack_axiom
#LDFLAGS  += -L$(TOP_DIR)/stack_axiom

VPATH += $(TOP_DIR)/stack_wd
CPPFLAGS += -I$(TOP_DIR)/stack_wd
LDFLAGS  += -L$(TOP_DIR)/stack_wd

#setup some basic flags
INCLUDES  = $(CPPFLAGS)

# PREPROCESSOR

SHARED_FLAGS=-Wall -pedantic -Werror -O2
CFLAGS=-x c++ -std=c++14 $(SHARED_FLAGS)
CXXFLAGS=-std=c++14 $(SHARED_FLAGS)

#setup wp
export WP_TIMEOUT ?= 10
export WP_COQ_TIMEOUT ?= 10
export WP_ALT_ERGO_STEPS ?= 10000
export WP_PROCESSES ?= 1

# flags for when we invoke Frama C directly instead of going
# through script_functions.sh
WP_TIME_FLAGS= \
	-wp-timeout $(WP_TIMEOUT) \
	-wp-coq-timeout $(WP_COQ_TIMEOUT) \
	-wp-steps $(WP_ALT_ERGO_STEPS) \
	-wp-par $(WP_PROCESSES)

#setup coq
SCRIPT?='$(TOP_DIR)/wp0.script' # default script
DRIVER=$(DRIVER_DIR)/driver

# having this as a separate variable allows us to override it in
# algorithm makefiles
WP_RTE_FLAGS ?= -warn-unsigned-overflow -warn-unsigned-downcast

# We differentiate between two types of WP options:
# 1) in WP_FLAGS we collect the general options
# 2) in WP_PROVER_FLAGS we collect the ones where we select the provers
# This allows us, for example, to start the gui very quickly and then
# run the prover(s) on select proof obligtions.

WP_BASE_FLAGS += -pp-annot
WP_BASE_FLAGS += -no-unicode
WP_BASE_FLAGS += -wp
WP_BASE_FLAGS += -wp-rte $(WP_RTE_FLAGS)
#WP_BASE_FLAGS += -wp-split

WP_FLAGS = $(WP_BASE_FLAGS)

WP_FLAGS += -wp-driver $(DRIVER_DIR)/external.driver
WP_FLAGS += -wp-script $(SCRIPT)
WP_FLAGS += -wp-model Typed+ref

#WP_PROVER_FLAGS += -wp-steps $(WP_ALT_ERGO_STEPS)

# provers
WP_PROVER_FLAGS += -wp-prover alt-ergo
WP_PROVER_FLAGS += -wp-prover cvc4-15
WP_PROVER_FLAGS += -wp-prover cvc3
WP_PROVER_FLAGS += -wp-prover z3
WP_PROVER_FLAGS += -wp-prover eprover
WP_PROVER_FLAGS += -wp-prover coq


#WP_PROVER_FLAGS += -wp-prover gappa
#WP_PROVER_FLAGS += -wp-prover metis

# link binary metit to metitarski
#WP_PROVER_FLAGS += -wp-prover metitarski

#WP_PROVER_FLAGS += -wp-prover princess
#WP_PROVER_FLAGS += -wp-prover psyche

# onnly ppc binary for available for macOS ...
#WP_PROVER_FLAGS += -wp-prover simplify
#WP_PROVER_FLAGS += -wp-prover spass
#WP_PROVER_FLAGS += -wp-prover verit

# yices (version 2.* does not support quantifiers ...)
#WP_PROVER_FLAGS += -wp-prover Yices

export WP=frama-c
export WPGUI=frama-c-gui
export WP_PROVER_FLAGS
export WP_C_FLAGS = -cpp-extra-args="$(INCLUDES)" $(WP_FLAGS)
export WP_CXX_FLAGS = -cxx-clang-command="framaCIRGen $(INCLUDES)"  $(WP_FLAGS)
export WP_C_REPORT=$(WP) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) -wp-par 1

TESTOBJ = $(FILE)_test.o $(FILE).o

$(DRIVER): FORCE
	@(cd $(DRIVER_DIR) && $(MAKE) compile)

$(FILE)_test: $(TESTOBJ) FORCE
	@$(CXX) $(LDFLAGS) -o $@ $(TESTOBJ)

test: $(FILE)_test FORCE
	@./$(FILE)_test

%.cpp:%.c
	cp $< $@

# only generate proof obligations for why3
%.why3:%.c FORCE
	@($(WP) $(WP_C_FLAGS) $(WP_TIME_FLAGS) -wp-prover why3 -wp-gen  -wp-out $(patsubst %.c,%.wp, $<)  $<)

# start WP on command line and run provers
%.wp:%.c $(DRIVER) FORCE
	@$(WP) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.c,%.wp, $<)  $<

%.wp++:%.cpp FORCE
	@$(WP) $(WP_CXX_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.cpp,%.wp++, $<)  $<

%.vs-par:%.c FORCE
	@${VS_DIR}/vs.sh -p $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(notdir $(patsubst %.c,%.wp, $<)) 

%.vs-pipe:%.c FORCE
	@${VS_DIR}/vs.sh -d $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(notdir $(patsubst %.c,%.wp, $<)) 

vs-par: $(FILE).vs-par

vs-pipe: $(FILE).vs-pipe

%.wprunner:%.c FORCE
	@${SCRIPT_DIR}/wp_runner.sh $< $(WP_C_FLAGS) $(WP_PROVER_FLAGS) -wp-par $(WP_PROCESSES)

# start WP GUI and run provers
%.wpgui:%.c $(DRIVER) FORCE
	@($(WPGUI) $(WP_C_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.c,%.wp, $<)  $< &)

%.wpgui++:%.cpp FORCE
	@($(WPGUI) $(WP_CXX_FLAGS) $(WP_PROVER_FLAGS) $(WP_TIME_FLAGS) -wp-out $(patsubst %.cpp,%.wp++, $<)  $< )

$(TOP_DIR)/Results/$(FILE).report: $(FILE).c
	. ${SCRIPT_DIR}/script_functions.sh; extract_data_Wp $(FILE) $(CMD) $(SEC) >$@

$(TOP_DIR)/Results/$(FILE).preport: $(FILE).c
	@. ${SCRIPT_DIR}/script_functions.sh; REPORT_BACKEND=wp_runner extract_data_Wp $(basename $<) $(CMD) $(SEC) >$@

generate: $(FILE).why3

report: $(TOP_DIR)/Results/$(FILE).report
	@. ${SCRIPT_DIR}/script_functions.sh; prettyPrintReport $<

report-clean: clean
	@$(RM) $(TOP_DIR)/Results/$(FILE).report


preport: $(TOP_DIR)/Results/$(FILE).preport
	@. ${SCRIPT_DIR}/script_functions.sh; prettyPrintReport $<

preport-clean:
	@$(RM) $(TOP_DIR)/Results/$(FILE).preport

%.check:%.c
	@$(WP) $(WP_C_FLAGS) -wp-check -wp-out $(patsubst %.c,%.wp, $<)  $<

# display saved results by FRAMA-C GUI
load:
	@frama-c-gui -load $(FILE).sav

obj: $(FILE).o

# cleanup

clean:: FORCE
	@(cd $(DRIVER_DIR) && $(MAKE) -s clean)
	@$(RM) *.o
	@$(RM) *.back
	@$(RM) *.orig
	@$(RM) *.exe
	@$(RM) .lia.cache
	@$(RM) -rf  *.debug
	@$(RM) -rf  .frama-c
	@$(RM) -rf  *.jessie
	@$(RM) -rf  *.wp
	@$(RM) -rf  *.wp++
	@$(RM) -rf  *.ml
	@$(RM) $(FILE).cpp
	@$(RM) $(FILE)_test
	@$(RM) $(FILE).tex
	@$(RM) $(FILE).sav

ASTYLEOPTIONS += -A3
ASTYLEOPTIONS += --indent=spaces=2
ASTYLEOPTIONS += --indent-col1-comments
ASTYLEOPTIONS += --min-conditional-indent=0
ASTYLEOPTIONS += --lineend=linux
ASTYLEOPTIONS += --break-closing-braces
ASTYLEOPTIONS += --add-braces
ASTYLEOPTIONS += --pad-oper
ASTYLEOPTIONS += --pad-header

format: FORCE
	@astyle $(ASTYLEOPTIONS) *.c *.cpp *.h

all: clean test report

FORCE:
